#!/bin/bash
#BATCH --job-name=prephase
#SBATCH --account=p697_norment_dev
#SBATCH --time=1:00:00
#SBATCH --ntasks=1
#SBATCH --mem-per-cpu=7600M
#SBATCH --cpus-per-task=8
#SBATCH --array=24

source /cluster/bin/jobsetup

set -o errexit
lscpu
module load singularity/3.7.1
module load bcftools/1.8
export SINGULARITY_BIND=""/ess/p697/data/durable/s3-api:/ess/p697/data/durable/s3-api""
export SIF=/ess/p697/data/durable/s3-api/github/comorment/containers/singularity
export PLINK="singularity exec --home $PWD:/home $SIF/gwas.sif plink"            # PLINK v1.90b6.18 64-bit (16 Jun 2020)
export PLINK2="singularity exec --home $PWD:/home $SIF/gwas.sif plink2"          # PLINK v2.00a2.3LM 64-bit Intel (24 Jan 2020)
export PYTHON="singularity exec --home $PWD:/home $SIF/python3.sif python"       # Python 3.8.10
export YHAPLO="singularity exec --home $PWD:/home /ess/p697/data/durable/projects/moba_qc_imputation/TF/chrY/software/yhaplo.sif yhaplo"       # Python 3.8.10
export EAGLEIMP="singularity exec --home $PWD:/home /ess/p697/data/durable/projects/moba_qc_imputation/TF/chrY/software/eagleimp.sif eagleimp"
export IMPUTE2="/ess/p697/data/durable/projects/moba_qc_imputation/software/impute_v2.3.2_x86_64_static/impute2"
# NB! change this to point to your files
export input=gsa1-ec-chr23-24-25-2-batch

export prefix=chr${SLURM_ARRAY_TASK_ID}
# export hrc_sites_file=/ess/p697/data/durable/projects/moba_qc_imputation/TF/chrY/reference/sites/gnomad.joint.eur.v4.1.sites.chrY.coded.as.24.tab.gz
export hrc_sites_file=/ess/p697/data/durable/projects/moba_qc_imputation/TF/chrY/reference/sites/EUR24.gnomad.genomes.v3.1.2.sites.chrY.tab.gz
#export hrc_sites_file=/ess/p697/data/durable/projects/moba_qc_imputation/TF/chrY/sites/europeans.coded.as.24.tab.gz

export HRC_1000G_check_bim=/ess/p697/data/durable/projects/moba_qc_imputation/TF/chrY/software/HRC-1000G-check-bim.pl

# Step 1a (exclude duplicated), 1b (exclude indels and non-ACTG alleles), 1c (exclude ambiguous SNPs)
echo -e '\nStep 1a (exclude duplicated), 1b (exclude indels and non-ACTG alleles), 1c (exclude ambiguous SNPs)\n'

$PLINK --bfile $input --chr ${SLURM_ARRAY_TASK_ID} --out $prefix.step0 --make-bed || true
$PLINK --bfile $prefix.step0 --list-duplicate-vars ids-only suppress-first --out $prefix.step1a || true
$PLINK --bfile $prefix.step0 --exclude $prefix.step1a.dupvar --make-bed --out $prefix.step1a || true
$PLINK --bfile $prefix.step1a --snps-only just-acgt --make-bed --out $prefix.step1b || true
awk '{ if (($5=="T" && $6=="A")||($5=="A" && $6=="T")||($5=="C" && $6=="G")||($5=="G" && $6=="C")) print $2, "ambig" ; else print $2 ;}' $prefix.step1b.bim | grep ambig > $prefix.step1b.snplist.txt  || true
$PLINK --bfile $prefix.step1b --exclude $prefix.step1b.snplist.txt --make-bed --out $prefix.step1c || true


echo -e '\nStep 2 include males\n'

$PLINK --bfile $prefix.step1c --check-sex y-only 0 200 --out $prefix
awk '$5 == "OK" && $4 == "1" {print $1, $2}' $prefix.sexcheck > $prefix.males
$PLINK --bfile $prefix.step1c --keep $prefix.males --make-bed --out $prefix.step2


echo -e '\nStep 3 geno 0.98 mac 1\n'

$PLINK --bfile $prefix.step2 --mac 1 --geno 0.02 --make-bed --out $prefix.step3



echo -e '\nStep 4 liftOver\n'

if true; then
    input_prefix="$prefix.step3" # Prefix for the initial BED/BIM/FAM files
    output_prefix="$prefix.step3_updated" # Intermediate output prefix
    export final_output_prefix="$prefix.step3_lifted" # Final output prefix after liftover
    chain_file="/ess/p697/data/durable/projects/moba_qc_imputation/software/hg19ToHg38.over.chain.gz" # Path to the chain file
    liftOver="/ess/p697/data/durable/projects/moba_qc_imputation/software/liftOver"
    # Step 1: Convert binary files to .ped and .map
    echo -e '\nliftOver convert to ped\n'
    $PLINK --bfile $input_prefix --recode --out $output_prefix

    awk -F='\t' -OFS='\t' '{sub("24","Y",$1);print}' ${output_prefix}.map > ${output_prefix}.map-i && mv ${output_prefix}.map-i ${output_prefix}.map

    # Step 2: Prepare the .map file for LiftOver
    awk '{print "chr"$1"\t"$4-1"\t"$4"\t"$2}' ${output_prefix}.map > ${output_prefix}_for_liftover.txt

    # Step 3: Run LiftOver
    echo -e '\nsliftOver\n'
    $liftOver ${output_prefix}_for_liftover.txt $chain_file ${output_prefix}_converted.txt ${output_prefix}_unmapped.txt
    # Step 4: Update the MAP file with new positions
    awk 'BEGIN{OFS="\t"} FNR==NR{a[$4]=$2; next} ($2 in a){$4=a[$2]+1}1' ${output_prefix}_converted.txt ${output_prefix}.map > ${final_output_prefix}.map

    # Step 5: Convert back to binary format using the updated map file and the original ped file
    echo -e '\nliftOver convert back\n'
    $PLINK --file $output_prefix --map ${final_output_prefix}.map --make-bed --out $final_output_prefix
fi


echo -e '\ncalc freq\n'

$PLINK --bfile $final_output_prefix --freq --make-bed --out $prefix.step4  || true


echo -e '\nperl\n'
perl ${HRC_1000G_check_bim} -b $prefix.step4.bim -f $prefix.step4.frq -r ${hrc_sites_file} -c '24' -h  || true


# echo -e '\nstep5\n'
# $PLINK --bfile $prefix.step4 --exclude Exclude-$prefix.step4-HRC.txt --make-bed --out $prefix.step5  || true


echo -e '\nstep6\n'
$PLINK --bfile $prefix.step4 --update-chr Chromosome-$prefix.step4-HRC.txt  --make-bed --out $prefix.step6 || true


echo -e '\nstep7\n'
$PLINK --bfile $prefix.step6 --update-map Position-$prefix.step4-HRC.txt --make-bed --out $prefix.step7  || true


echo -e '\nstep8\n'
$PLINK --bfile $prefix.step7 --flip Strand-Flip-$prefix.step4-HRC.txt --make-bed --out $prefix.step8 || true


echo -e '\nstep9\n'
$PLINK --bfile $prefix.step8 --a1-allele Force-Allele1-$prefix.step4-HRC.txt --make-bed --out $prefix.qced  || true

awk '{print $1, $2}' $prefix.qced.fam > all_individuals.txt
sort -k 1,1 all_individuals.txt > all_individuals.sorted.txt

total_lines=$(wc -l < all_individuals.txt)
chunks=$(( (total_lines + 4999) / 5000 ))
split -d -l $(( (total_lines + chunks - 1) / chunks )) --additional-suffix=.txt all_individuals.sorted.txt ichunk_

for file in ichunk_*.txt; do
    #  Extract the suffix by removing the prefix "chunk_"
    suffix="${file#ichunk_}"
    # Remove the ".txt" extension to isolate the numeric part
    suffix="${suffix%.txt}"
    $PLINK --bfile $prefix.qced --keep $file --keep-allele-order --make-bed --out $prefix.ichunk_$suffix.qced

    $PLINK --bfile $prefix.ichunk_$suffix.qced --recode oxford --keep-allele-order --out $prefix.ichunk_$suffix.qced

    $PLINK --bfile $prefix.ichunk_$suffix.qced --recode --keep-allele-order --out $prefix.ichunk_$suffix.qced


done
